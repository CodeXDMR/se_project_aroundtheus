!function(){"use strict";class e{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_toggleInputError(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._toggleInputError(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetForm(){this._disableButton(),this._inputList.forEach((e=>{this._hideInputError(e)}))}}var t=class{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this),this._closeButton=this._popupElement.querySelector(".modal__close-button")}open(){this._popupElement.classList.add("modal__open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal__open"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(e=>{e.target===e.currentTarget&&this.close()})),this._closeButton.addEventListener("click",(()=>{this.close()}))}},r=class extends t{constructor(e,t,r,s){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button-submit"),this._handleFormSubmit=t,this._submitButtonText=r,this._loadingButtonText=s}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._submitButtonText}_getInputValues(){const e=Array.from(this._popupElement.querySelectorAll(".modal__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._popupForm.reset()}};const s="#card-template",i="#cards-list",n="#profile-avatar-modal",o="#profile-edit-modal",a="#add-card-modal",l="#delete-card-modal",d="#preview-image-modal",h="#profile-avatar",c="#profile-name",u="#profile-about",_={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button-submit",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input_error"},m=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInfoAPI(){return Promise.all([this.getInitialCardsAPI(),this.getProfileInfoAPI()])}getInitialCardsAPI(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getProfileInfoAPI(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}setProfileInfoAPI(e,t){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})})}setAvatarAPI(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}addCardAPI(e){let{name:t,link:r}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})})}deleteCardAPI(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}addLikeAPI(e){return this._request(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers})}removeLikeAPI(e){return this._request(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"0d34a92c-1da7-4adc-abc0-e2b3b38a4b1f","Content-Type":"application/json"}}),p=document.querySelector("#profile-avatar-container"),f=document.querySelector("#profile-edit-button"),v=document.querySelector("#profile-add-card-button"),g=document.querySelector("#profile-title-input"),E=document.querySelector("#profile-about-input"),b=document.forms["edit-card-form"],L=document.forms["add-card-form"],I=document.forms["avatar-edit-form"],k=new e(_,L),S=new e(_,b),C=new e(_,I);let y,A;const B=new r(n,(function(e){B.showLoading(),m.setAvatarAPI(e.avatURL).then((t=>{w.setAvatar(e.avatURL)})).then((()=>{B.close()})).catch((e=>{alert("Unexpected error, please try again."),console.error("There was an error -",e)})).finally((()=>{B.hideLoading()}))}),"Save","Saving...");B.setEventListeners(),p.addEventListener("click",(()=>{B.open(),C.resetForm()}));const w=new class{constructor(e){let{profNameSelector:t,profAboutSelector:r,profAvatarSelector:s}=e;this._profAvatar=document.querySelector(s),this._profName=document.querySelector(t),this._profAbout=document.querySelector(r)}getProfileInfo(){return{name:this._profName.textContent,about:this._profAbout.textContent}}setProfileInfo(e){let{name:t,about:r}=e;this._profName.textContent=t,this._profAbout.textContent=r}getAvatar(){return this._profAvatar.src}setAvatar(e){this._profAvatar.src=e}openModal(){}}({profAvatarSelector:h,profNameSelector:c,profAboutSelector:u}),q=new r(o,(function(e){let{name:t,about:r}=e;q.showLoading(),m.setProfileInfoAPI(t,r).then((e=>{w.setProfileInfo({name:t,about:r})})).then((()=>{q.close()})).catch((e=>{alert("Unexpected error, please try again."),console.error("There was an error -",e)})).finally((()=>{q.hideLoading()}))}),"Save","Saving...");function P(e,t){const r=s;return A=new class{constructor(e,t,r,s,i,n,o,a,l,d,h){let{name:c,link:u,likes:_,owner:m,_id:p}=e;this._cardId=p,this._cardDeleteButton=a,this._cardElement=o,this._cardImage=l,this._cardOwnerID=m._id,this._cardSelector=t,this._cardTitle=d,this._handleImageClick=r,this._imageLink=u,this._imageName=c,this._handleDeleteCardPopup=s,this._handleLikeClick=i,this._likeCounter=h,this._likes=_,this._userID=n}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeClick(this))),this._cardDeleteButton.addEventListener("click",(()=>this._handleDeleteCardPopup(this))),this._cardImage.addEventListener("click",(()=>this._handleImageClick({link:this._imageLink,name:this._imageName}))),this._fillCardTemplate()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector("#cards-template-list").cloneNode(!0)}_fillCardTemplate(){this._cardImage.alt=this._profName,this._cardImage.src=this._imageLink,this._cardElement.id=this._userID,this._cardTitle.textContent=this._imageName,this._renderLikes(),this._userID!==this._cardOwnerID&&this._cardDeleteButton.remove()}deleteCard(){this._cardElement.remove(),this._cardElement=null}isLiked(){return this._likes.some((e=>e._id===this._userID))}setLikes(e){this._likes=e,this._renderLikes()}_renderLikes(){this._likeCounter.textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}getView(){return this._cardElement=this._getTemplate(),this._likeCounter=this._cardElement.querySelector("#card-like-counter"),this._likeButton=this._cardElement.querySelector("#card-like-button"),this._cardDeleteButton=this._cardElement.querySelector("#card-delete-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._setEventListeners(),this._cardElement}}(e,r,x,$,N,t),A.getView()}q.setEventListeners(),f.addEventListener("click",(()=>{q.open();const e=w.getProfileInfo();g.value=e.name,E.value=e.about})),m.getInfoAPI().then((e=>{let[t,r]=e;y=new class{constructor(e,t){let{items:r,renderer:s}=e;this._renderedItems=r,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this._renderedItems.reverse().forEach(this._renderer)}addItem(e){this._container.prepend(e)}}({items:t,renderer:e=>{const t=P(e,r._id);y.addItem(t)}},i),y.renderItems(),w.setProfileInfo(r),w.setAvatar(r.avatar)})).catch((e=>{alert("Unexpected error, please try again."),console.error("There was an error -",e)}));const T=new class extends t{constructor(e){super({popupSelector:e}),this._imageElement=this._popupElement.querySelector("#modal-preview-image"),this._imageCaption=this._popupElement.querySelector("#modal-preview-title"),super.setEventListeners()}open(e){this._imageElement.src=e.link,this._imageElement.alt=`Image ${e.name}`,this._imageCaption.textContent=e.name,super.open()}}(d);function x(e){T.open(e)}const U=new r(a,(function(e){let{name:t,link:r}=e;U.showLoading(),m.addCardAPI({name:t,link:r}).then((e=>{const t=P(e,e.owner._id,e._id);y.addItem(t)})).then((()=>{U.close()})).catch((e=>{alert("Unexpected error, please try again."),console.error("There was an error -",e)})).finally((()=>{U.hideLoading()}))}),"Create","Creating...");U.setEventListeners(),v.addEventListener("click",(()=>{U.open(),k.resetForm()}));const D=new class extends r{constructor(e,t,r,s){super(e,t,r,s),this._loadingButtonText=s}setSubmitAction(e){this._handleFormSubmit=e}}(l,$,"Yes","Deleting...");function $(e){D.open(),D.setSubmitAction((()=>{D.showLoading(),m.deleteCardAPI(e._cardId).then((t=>{e.deleteCard()})).then((()=>{D.close()})).catch((e=>{alert("Unexpected error, please try again."),console.error("There was an error -",e)})).finally((()=>{D.hideLoading()}))}))}function N(e){e.isLiked()?m.removeLikeAPI(e._cardId).then((t=>{e.setLikes(t.likes)})).catch((e=>{alert("Unexpected error, please try again."),console.error("There was an error -",e)})):m.addLikeAPI(e._cardId).then((t=>{e.setLikes(t.likes)})).catch((e=>{alert("Unexpected error, please try again."),console.error("There was an error -",e)}))}D.setEventListeners(),k.enableValidation(),S.enableValidation(),C.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,